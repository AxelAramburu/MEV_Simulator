import { Connection } from "@solana/web3.js";
import { AccountFetcher } from ".";
import { Address } from "../../address-util";
import { ParsableEntity } from "../parsing";
type CachedContent<T> = {
    parser: ParsableEntity<T>;
    fetchedAt: number;
    value: T | null;
};
export type RetentionPolicy<T> = ReadonlyMap<ParsableEntity<T>, number>;
/**
 * Options when fetching the accounts
 */
export type SimpleAccountFetchOptions = {
    maxAge?: number;
};
export declare class SimpleAccountFetcher<T, FetchOptions extends SimpleAccountFetchOptions> implements AccountFetcher<T, FetchOptions> {
    readonly connection: Connection;
    readonly retentionPolicy: RetentionPolicy<T>;
    cache: Map<string, CachedContent<T>>;
    constructor(connection: Connection, retentionPolicy: RetentionPolicy<T>);
    getAccount<U extends T>(address: Address, parser: ParsableEntity<U>, opts?: FetchOptions | undefined, now?: number): Promise<U | null>;
    private getMaxAge;
    getAccounts<U extends T>(addresses: Address[], parser: ParsableEntity<U>, opts?: SimpleAccountFetchOptions | undefined, now?: number): Promise<ReadonlyMap<string, U | null>>;
    getAccountsAsArray<U extends T>(addresses: Address[], parser: ParsableEntity<U>, opts?: FetchOptions | undefined, now?: number): Promise<ReadonlyArray<U | null>>;
    populateAccounts<U extends T>(accounts: ReadonlyMap<string, U | null>, parser: ParsableEntity<U>, now: number): void;
    refreshAll(now?: number): Promise<void>;
    private fetchAndPopulateCache;
}
export {};
