import { Commitment, Connection, Transaction, VersionedTransaction } from "@solana/web3.js";
import { Wallet } from "../wallet";
import { SendTxRequest } from "./types";
/**
 * @deprecated
 */
export declare class TransactionProcessor {
    readonly connection: Connection;
    readonly wallet: Wallet;
    readonly commitment: Commitment;
    constructor(connection: Connection, wallet: Wallet, commitment?: Commitment);
    signTransaction(txRequest: SendTxRequest): Promise<{
        transaction: Transaction | VersionedTransaction;
        lastValidBlockHeight: number;
        blockhash: string;
    }>;
    signTransactions(txRequests: SendTxRequest[]): Promise<{
        transactions: (Transaction | VersionedTransaction)[];
        lastValidBlockHeight: number;
        blockhash: string;
    }>;
    sendTransaction(transaction: Transaction | VersionedTransaction, lastValidBlockHeight: number, blockhash: string): Promise<string>;
    constructSendTransactions(transactions: (Transaction | VersionedTransaction)[], lastValidBlockHeight: number, blockhash: string, parallel?: boolean): () => Promise<PromiseSettledResult<string>[]>;
    signAndConstructTransaction(txRequest: SendTxRequest): Promise<{
        signedTx: Transaction | VersionedTransaction;
        execute: () => Promise<string>;
    }>;
    signAndConstructTransactions(txRequests: SendTxRequest[], parallel?: boolean): Promise<{
        signedTxs: (Transaction | VersionedTransaction)[];
        execute: () => Promise<PromiseSettledResult<string>[]>;
    }>;
}
