import { AddressLookupTableAccount, Commitment, Connection, SendOptions, Signer, Transaction, VersionedTransaction } from "@solana/web3.js";
import { Wallet } from "../wallet";
import { Instruction, TransactionPayload } from "./types";
/**
  Build options when building a transaction using TransactionBuilder
  @param latestBlockhash
  The latest blockhash to use when building the transaction.
  @param blockhashCommitment
  If latestBlockhash is not provided, the commitment level to use when fetching the latest blockhash.
  @param maxSupportedTransactionVersion
  The transaction version to build. If set to "legacy", the transaction will
  be built using the legacy transaction format. Otherwise, the transaction
  will be built using the VersionedTransaction format.
  @param lookupTableAccounts
  If the build support VersionedTransactions, allow providing the lookup
  table accounts to use when building the transaction. This is only used
  when maxSupportedTransactionVersion is set to a number.
  @param computeBudgetOption
  The compute budget limit and priority fee to use when building the transaction.
  This defaults to 'none'.
 */
export type BuildOptions = LegacyBuildOption | V0BuildOption;
type LegacyBuildOption = {
    maxSupportedTransactionVersion: "legacy";
} & BaseBuildOption;
type V0BuildOption = {
    maxSupportedTransactionVersion: number;
    lookupTableAccounts?: AddressLookupTableAccount[];
} & BaseBuildOption;
type BaseBuildOption = {
    latestBlockhash?: {
        blockhash: string;
        lastValidBlockHeight: number;
    };
    computeBudgetOption?: ComputeBudgetOption;
    blockhashCommitment: Commitment;
};
type ComputeBudgetOption = {
    type: "none";
} | {
    type: "fixed";
    priorityFeeLamports: number;
    computeBudgetLimit?: number;
} | {
    type: "auto";
    maxPriorityFeeLamports?: number;
    computeBudgetLimit?: number;
    percentile?: number;
};
type SyncBuildOptions = BuildOptions & Required<BaseBuildOption>;
/**
 * A set of options that the builder will use by default, unless overridden by the user in each method.
 */
export type TransactionBuilderOptions = {
    defaultBuildOption: BuildOptions;
    defaultSendOption: SendOptions;
    defaultConfirmationCommitment: Commitment;
};
export declare const defaultTransactionBuilderOptions: TransactionBuilderOptions;
/**
 * Transaction builder for composing, building and sending transactions.
 * @category Transactions
 */
export declare class TransactionBuilder {
    readonly connection: Connection;
    readonly wallet: Wallet;
    private instructions;
    private signers;
    private opts;
    constructor(connection: Connection, wallet: Wallet, defaultOpts?: TransactionBuilderOptions);
    /**
     * Append an instruction into this builder.
     * @param instruction - An Instruction
     * @returns Returns this transaction builder.
     */
    addInstruction(instruction: Instruction): TransactionBuilder;
    /**
     * Append a list of instructions into this builder.
     * @param instructions - A list of Instructions
     * @returns Returns this transaction builder.
     */
    addInstructions(instructions: Instruction[]): TransactionBuilder;
    /**
     * Prepend a list of instructions into this builder.
     * @param instruction - An Instruction
     * @returns Returns this transaction builder.
     */
    prependInstruction(instruction: Instruction): TransactionBuilder;
    /**
     * Prepend a list of instructions into this builder.
     * @param instructions - A list of Instructions
     * @returns Returns this transaction builder.
     */
    prependInstructions(instructions: Instruction[]): TransactionBuilder;
    addSigner(signer: Signer): TransactionBuilder;
    /**
     * Checks whether this builder contains any instructions.
     * @returns Whether this builder contains any instructions.
     */
    isEmpty(): boolean;
    /**
     * Compresses all instructions & signers in this builder
     * into one single instruction
     * @param compressPost Compress all post instructions into the instructions field
     * @returns Instruction object containing all
     */
    compressIx(compressPost: boolean): Instruction;
    /**
     * Returns the size of the current transaction in bytes. Measurement method can differ based on the maxSupportedTransactionVersion.
     * @param userOptions - Options to override the default build options
     * @returns the size of the current transaction in bytes.
     * @throws error if there is an error measuring the transaction size.
     *         This can happen if the transaction is too large, or if the transaction contains too many keys to be serialized.
     */
    txnSize(userOptions?: Partial<BuildOptions>): number;
    /**
     * Constructs a transaction payload with the gathered instructions synchronously
     * @param options - Options used to build the transaction
     * @returns a TransactionPayload object that can be excuted or agregated into other transactions
     */
    buildSync(options: SyncBuildOptions): TransactionPayload;
    /**
     * Constructs a transaction payload with the gathered instructions
     * @param userOptions - Options to override the default build options
     * @returns a TransactionPayload object that can be excuted or agregated into other transactions
     */
    build(userOptions?: Partial<BuildOptions>): Promise<TransactionPayload>;
    /**
     * Constructs a transaction payload with the gathered instructions, sign it with the provider and send it out
     * @param options - Options to build the transaction. . Overrides the default options provided in the constructor.
     * @param sendOptions - Options to send the transaction. Overrides the default options provided in the constructor.
     * @param confirmCommitment - Commitment level to wait for transaction confirmation. Overrides the default options provided in the constructor.
     * @returns the txId of the transaction
     */
    buildAndExecute(options?: Partial<BuildOptions>, sendOptions?: Partial<SendOptions>, confirmCommitment?: Commitment): Promise<string>;
}
/**
 * Checks if a transaction is a versioned transaction.
 * @param tx Transaction to check.
 * @returns True if the transaction is a versioned transaction.
 */
export declare const isVersionedTransaction: (tx: Transaction | VersionedTransaction) => tx is VersionedTransaction;
export {};
